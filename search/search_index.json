{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Daraja Multiplatform is a Kotlin Multiplatform library that simplifies M-Pesa integration for cross-platform mobile applications. It provides a unified API for both Android(Kotlin) and iOS(Swift), enabling developers to build feature-rich apps with seamless M-Pesa functionalities.</p> <p>M-Pesa is a mobile money transfer service developed by Vodafone and Safaricom that allows users to store and transfer money through their mobile phones.</p>"},{"location":"#project-goals","title":"Project Goals","text":"<p>Daraja Multiplatform aims to streamline the integration of M-Pesa services into Kotlin and Swift applications by providing a simplified interface to the Daraja API.</p> <p>By abstracting away the complexities of the underlying API, the library significantly reduces development time and effort. Additionally, Daraja Multiplatform promotes code reusability and maintainability across different platforms, allowing developers to focus on core application features rather than low-level integration details.</p>"},{"location":"#supported-platforms-features","title":"Supported Platforms &amp; Features","text":"<p>Currently, Daraja Multiplatform supports Kotlin and Swift applications.</p> <p>Core features include:</p> <ul> <li>Authorization - Gives you a time bound access token to call allowed APIs.</li> <li>M-Pesa Express - Merchant initiated online payments.</li> <li>M-Pesa Express Query - Check the status of a Lipa Na M-Pesa Online Payment(M-Pesa Express).</li> <li>Dynamic QR - Generates a dynamic M-PESA QR code.</li> <li>Customer To Business (C2B)</li> <li>Business To Customer (B2C) - Transact between an M-Pesa short code to a phone number   registered on M-Pesa.</li> <li>Transaction Status - Check the status of a transaction.</li> <li>Account Balance - Enquire the balance on an M-Pesa BuyGoods (Till Number)</li> <li>Reversal - Reverses an M-Pesa transaction.</li> <li>Tax Remittance - This API enables businesses to remit tax to Kenya Revenue Authority (KRA).</li> <li>Business Pay Bill - Pay bills directly from your business account to a pay bill number, or a   paybill store.</li> <li>Business Buy Goods - Pay for goods and services directly from your business account to a till number or merchant store number.</li> </ul>"},{"location":"kotlin/","title":"Kotlin SDK","text":""},{"location":"kotlin/#getting-started","title":"Getting Started","text":"<p>To get started with Daraja Multiplatform SDK, you will need to create a Daraja API account on the Daraja API portal and set up a new test application.</p> <p>Once you have access to the created test app, retrieve the Consumer Key, Consumer Secret and Passkey.</p>"},{"location":"kotlin/#installation","title":"Installation","text":"<ul> <li>In an Android projects, add the following dependency in the app/feature module gradle file:</li> </ul> <pre><code>dependencies {\n    implementation(\"io.github.victorkabata:daraja-multiplatform:&lt;latest-version&gt;\")\n}\n</code></pre> <ul> <li>In Kotlin Multiplatform projects, add the following dependency in the common/shared module gradle file:</li> </ul> <pre><code>kotlin {\n    sourceSets {\n        commonMain.dependencies {\n            implementation(\"io.github.victorkabata:daraja-multiplatform:&lt;latest-version&gt;\")\n        }\n    }\n}\n</code></pre>"},{"location":"kotlin/#setting-up","title":"Setting Up","text":"<ul> <li>Add the Consumer Key, Consumer Secret and Passkey to your project's environment secrets or local.properties file.</li> </ul> <p>To protect your sensitive API keys, it's recommended to store your Consumer Key, Consumer Secret, and Passkey in your project's environment secrets or a local properties file (outside of version control). This ensures they are not accidentally exposed in public repositories.</p> <ul> <li>Instantiate a <code>Daraja</code> object, providing the necessary environment variables. This Daraja instance serves as the entry   point for various M-Pesa operations. Core functionalities include obtaining an access token required for subsequent   API calls and initiating M-Pesa Express STK push requests.</li> </ul> <pre><code>val daraja: Daraja = Daraja.Builder()\n    .setConsumerSecret(\"your_consumer_secret\")\n    .setConsumerKey(\"your_consumer_key\")\n    .setPassKey(\"your_pass_key\")\n    .isProduction() // Optional. Will default to sandbox_mode = true\n    .build()\n</code></pre> <p>Daraja Multiplatform includes built-in network logging, which is active by default in sandbox mode but disabled in production mode. To inspect network requests and responses, view logs in Android Studio's Logcat under the Daraja Multiplatform tag.</p>"},{"location":"kotlin/#usage","title":"Usage","text":""},{"location":"kotlin/#request-access-token","title":"Request Access Token","text":"<p>To request an access token from Daraja API, invoke the <code>authorization</code> function:</p> <pre><code>val accessTokenResult: DarajaResult&lt;DarajaToken&gt; = daraja.authorization()\n\naccessTokenResult.onSuccess { accessToken -&gt;\n    println(accessToken)\n}.onFailure { error -&gt;\n    println(error)\n}\n</code></pre>"},{"location":"kotlin/#initiate-m-pesa-express-stk-request","title":"Initiate M-Pesa Express STK Request","text":"<ul> <li>To initiate M-Pesa Express(Lipa na M-Pesa Online) STK request, invoke the <code>mpesaExpress</code> function:</li> </ul> <pre><code>val paymentResponse: DarajaResult&lt;MpesaExpressResponse&gt; = daraja.mpesaExpress(\n    businessShortCode = \"174379\",\n    amount = 1,\n    phoneNumber = \"07xxxxxxxx\", // or +2547xxxxxxxx or 2547xxxxxxxx\n    transactionDesc = \"M-Pesa payment\",\n    callbackUrl = \"your_callback_url\",\n    accountReference = \"CompanyName\"\n)\n\npaymentResponse.onSuccess { paymentResponse -&gt;\n    println(paymentResponse)\n}.onFailure { error -&gt;\n    println(error)\n}\n</code></pre>"},{"location":"kotlin/#query-m-pesa-express-stk-status","title":"Query M-Pesa Express STK Status","text":"<ul> <li>To check the status of M-Pesa Express(Lipa na M-Pesa Online) STK request, invoke the <code>mpesaExpressQuery</code> function:</li> </ul> <pre><code>val mpesaExpressQuery: DarajaResult&lt;QueryMpesaExpressResponse&gt; = daraja.mpesaExpressQuery(\n    businessShortCode = \"174379\",\n    timeStamp = \"20160216165627\",\n    checkOutRequestID = \"ws_CO_260520211133524545\"\n)\n\nmpesaExpressQuery.onSuccess { mpesaExpressQuery -&gt;\n    println(mpesaExpressQuery)\n}.onFailure { error -&gt;\n    println(error)\n}\n</code></pre>"},{"location":"kotlin/#generate-dynamic-qr-code","title":"Generate Dynamic QR Code","text":"<ul> <li>To generate a dynamic QR code that can be used to trigger payment, invoke the <code>generateQR</code> function:</li> </ul> <pre><code>val qrCode: DarajaResult&lt;DynamicQrResponse&gt; = daraja.generateDynamicQr(\n    merchantName = \"Shop 1\",\n    referenceNumber = UUID().uuidString,\n    amount = 10,\n    transactionCode = DarajaTransactionCode.sm,\n    cpi = \"373132\",\n    size = 300\n)\n\nqrCode.onSuccess { qr -&gt;\n    println(qr)\n}.onFailure { error -&gt;\n    println(error)\n}\n</code></pre>"},{"location":"swift/","title":"Swift SDK","text":""},{"location":"swift/#getting-started","title":"Getting Started","text":"<p>To get started with Daraja Multiplatform SDK, you will need to create a Daraja API account on the Daraja API portal and set up a new test application.</p> <p>Once you have access to the created test app, retrieve the Consumer Key, Consumer Secret and Passkey.</p>"},{"location":"swift/#installation","title":"Installation","text":"<ul> <li>In Xcode add the DarajaMultiplatform package, navigate to File -&gt; Add package dependecies. Enter the package GitHub   url below, select the package and choose the target(s) to add it to and click \"Add Package\".</li> </ul> <pre><code>https://github.com/VictorKabata/DarajaSwiftPackage.git\n</code></pre> <p>To protect your sensitive API keys, it's recommended to store your Consumer Key, Consumer Secret, and Passkey in your project's environment secrets (outside of version control). This ensures they are not accidentally exposed in public repositories.</p> <ul> <li>Instantiate a <code>Daraja</code> object, providing the necessary environment variables. This Daraja instance serves as the entry   point for various M-Pesa operations. Core functionalities include obtaining an access token required for subsequent   API calls and initiating M-Pesa Express STK push requests.</li> </ul> <pre><code>let daraja = Daraja(\n    consumerKey: \"your_consumer_key\",\n    consumerSecret: \"your_consumer_secret\",\n    passKey: \"your_pass_key\",\n    environment: DarajaEnvironment.sandboxEnvironment)\n</code></pre> <ul> <li>The environment can be either DarajaEnvironment.sandboxEnvironment or DarajaEnvironment.productionEnvironment.</li> </ul> <p>Daraja Multiplatform includes built-in network logging, which is active by default in sandbox mode but disabled in production mode. To inspect network requests and responses, view logs in Android Studio's Logcat under the Daraja Multiplatform tag.</p>"},{"location":"swift/#usage","title":"Usage","text":"<ul> <li>Start by importing the package to your Swift code:</li> </ul> <pre><code>import DarajaMultiplatform\n</code></pre>"},{"location":"swift/#request-access-token","title":"Request Access Token","text":"<p>To request an access token from Daraja API, invoke the <code>authorization</code> function:</p> <pre><code>daraja.authorization()\n.onSuccess(action: { accessToken in\n    print(accessToken)\n})\n.onFailure(action: { error in\n    print(error)\n})\n</code></pre>"},{"location":"swift/#initiate-m-pesa-express-stk-request","title":"Initiate M-Pesa Express STK Request","text":"<ul> <li>To initiate M-Pesa Express(Lipa na M-Pesa Online) STK request, invoke the <code>mpesaExpress</code> function:</li> </ul> <pre><code>daraja.mpesaExpress(\n    businessShortCode: \"174379\",\n    amount: 1,\n    phoneNumber: \"07xxxxxxxx\", // or +2547xxxxxxxx or 2547xxxxxxxx\n    transactionType: .customerBuyGoodsOnline,\n    transactionDesc: \"your_callback_url\",\n    callbackUrl: \"your_callback_url\",\n    accountReference: \"CompanyName\"\n).onSuccess(action: { paymentResponse in\n    print(paymentResponse)\n})\n.onFailure(action: { error in\n    print(error)\n})\n</code></pre>"},{"location":"swift/#query-m-pesa-express-stk-status","title":"Query M-Pesa Express STK Status","text":"<ul> <li>To check the status of M-Pesa Express(Lipa na M-Pesa Online) STK request, invoke the <code>mpesaExpressQuery</code> function:</li> </ul> <pre><code>daraja.mpesaExpressQuery(\n    businessShortCode: \"174379\",\n    timestamp: \"20160216165627\",\n    checkoutRequestID: \"ws_CO_260520211133524545\"\n).onSuccess(action: { transaction in\n    print(transaction)\n})\n.onFailure(action: { error in\n    print(error)\n})\n</code></pre>"},{"location":"swift/#generate-dynamic-qr-code","title":"Generate Dynamic QR Code","text":"<ul> <li>To generate a dynamic QR code that can be used to trigger payment, invoke the <code>generateQR</code> function:</li> </ul> <pre><code>daraja.generateDynamicQr(\n    merchantName: \"Shop 1\",\n    referenceNumber: UUID().uuidString,\n    amount: 10,\n    transactionCode: DarajaTransactionCode.sm,\n    cpi: \"373132\",\n    size: 300\n).onSuccess(action: { qrCode in\n    print(qrCode)\n})\n.onFailure(action: { error in\n    print(error)\n})\n</code></pre>"}]}